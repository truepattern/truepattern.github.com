<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nodejs | TruePattern]]></title>
  <link href="http://truepattern.github.com/blog/categories/nodejs/atom.xml" rel="self"/>
  <link href="http://truepattern.github.com/"/>
  <updated>2012-06-05T01:55:28-07:00</updated>
  <id>http://truepattern.github.com/</id>
  <author>
    <name><![CDATA[aras]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Todo Application]]></title>
    <link href="http://truepattern.github.com/blog/2012/06/05/todo-application/"/>
    <updated>2012-06-05T01:01:00-07:00</updated>
    <id>http://truepattern.github.com/blog/2012/06/05/todo-application</id>
    <content type="html"><![CDATA[<h2>Lets say Hello, World to Node.js with a Todo app</h2>

<h3>Goal</h3>

<ul>
<li>To run a Todo Application that can capture Todo's from user and save it on server (persist)</li>
</ul>


<p>The application and requirements are well known, so no need to go over what todo is. If you need pointers, please refer to <a href="http://addyosmani.github.com/todomvc/">this page</a>.</p>

<h3>Deliverables</h3>

<ul>
<li>Todo Server running on Node.js, MongoDB exposing REST API</li>
<li>Todo MVC client on Backbone.js using REST to connect with server</li>
</ul>


<!-- more -->


<h2>Todo Server</h2>

<p>There are some cool frameworks for Node coming up every day and its a fast changing landscape. To keep things simple, we'll base our technologies on a robust ground with proven technologies like ExpressJS and MongooseJS.  I have written a wrapper over both of these proven technologies (common settings that would help you bootstrap your application quicker) in <a href="http://github.com/truepattern/aonx">aonx</a>.</p>

<h3>Directory structure</h3>

<p>I prefer a very modular approach, where all the models, controllers and views are self contained within a directory (similar to django) and that way it could be potentially reused elsewhere. So we'll go with a structure</p>

<ul>
<li>apps -- contains todo module</li>
<li>config -- config for todo server</li>
<li>public -- client side js, css, etc.,</li>
<li>test -- mocha tests</li>
<li>server.js  -- main server js file</li>
</ul>


<h3>Todo App</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Todo model (todo_model.js)</span> <a href='/downloads/code/todo_model.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Todo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">content</span>  <span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span><span class="nb">String</span><span class="p">,</span> <span class="nx">required</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span> <span class="nx">index</span><span class="o">:</span> <span class="kc">true</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">done</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span><span class="nb">Boolean</span><span class="p">,</span> <span class="k">default</span><span class="o">:</span> <span class="kc">false</span>  <span class="p">},</span>
</span><span class='line'>    <span class="nx">order</span>  <span class="o">:</span> <span class="nb">Number</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>as you can see, the model part is trivial, similarly aonx provides crudHelpers for mongoose, which make the controller a straight forward express-resource hookup as given below</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Todo controller (todo_controller.js)</span> <a href='/downloads/code/todo_controller.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">index</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">Todo</span><span class="p">.</span><span class="nx">index</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span><span class="nx">res</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="k">new</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">Todo</span><span class="p">.</span><span class="nx">createObject</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">Todo</span><span class="p">.</span><span class="nx">createObject</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">show</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">Todo</span><span class="p">.</span><span class="nx">showObject</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">todo</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">update</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">Todo</span><span class="p">.</span><span class="nx">updateObject</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">todo</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">destroy</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">Todo</span><span class="p">.</span><span class="nx">removeObject</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">todo</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>please refer to express-resource module for the crud routing hookup. As a last step, we'll bind the controllers to the url of our choice (todos/*)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>REST url (todo_url.js)</span> <a href='/downloads/code/todo_url.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// hookup the controller exported methods to this resource</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s1">&#39;todos&#39;</span><span class="p">,</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./controllers&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Testing</h3>

<p>Now, the part where we want to make sure all the REST part is working fine. Similar to aonx, I have put together a mocha wrapper for crudTesting called <a href="http://github.com/truepattern/berry">berry</a>. Its like just give the url and a sample object, it would verify create, read, update and delete. The sample unit test code is as follows</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Unit Test (todo_test.js)</span> <a href='/downloads/code/todo_test.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">serverUrl</span> <span class="o">+</span> <span class="s1">&#39;/v1/todos&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">todoObj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">title</span><span class="o">:</span><span class="s1">&#39;Hello Todo&#39;</span><span class="p">};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">todoObj1</span> <span class="o">=</span> <span class="p">{</span><span class="nx">title</span><span class="o">:</span><span class="s1">&#39;Updated Hello Todo&#39;</span><span class="p">};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">crudfn</span> <span class="o">=</span> <span class="nx">berry</span><span class="p">.</span><span class="nx">crudTester</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">todoObj</span><span class="p">,</span> <span class="nx">todoObj1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Run the server</h3>

<p>Now that you have made it so far, following are the instructions to run the todo server
```</p>

<h1>make sure node, npm, mongodb are installed</h1>

<p>git clone https://github.com/truepattern/todo-server.git
cd todo-server
npm install -d</p>

<h1>lets run unit tests</h1>

<p>make</p>

<h1>run the server</h1>

<p>node server.js</p>

<h1>go to another terminal</h1>

<p>curl localhost:8080/api/v1/todos
curl localhost:8080/api/v1/todos/new?content=hello
curl localhost:8080/api/v1/todos</p>

<p>```</p>

<h2>Todo Client</h2>

<p>I have copied the todo mvc client (backbone.js based) from <a href="http://addyosmani.github.com/todomvc/">here</a>. Just one change, instead of localstorage, now the client points to the localhost server. You can see the client by going to browser localhost:8080/index.html</p>
]]></content>
  </entry>
  
</feed>
